import { useState, useRef, useCallback, useEffect } from 'react';

interface CognitiveAudio {
  id: string;
  title: string;
  description: string;
  category: 'motivacion' | 'concentracion' | 'relajacion' | 'celebracion' | 'resolucion' | 'recuperacion' | 'energia' | 'confianza';
  duration: string;
  script: string;
  neuroscience_principle: string;
  color: string;
  icon: string;
}

export const useCognitiveAudio = () => {
  const [currentAudio, setCurrentAudio] = useState<string | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [showCognitiveModal, setShowCognitiveModal] = useState(false);
  const speechRef = useRef<SpeechSynthesisUtterance | null>(null);
  const [isAvailable, setIsAvailable] = useState(false);

  // Scripts de audio basados en neurociencia
  const cognitiveAudios: CognitiveAudio[] = [
    {
      id: "welcome-motivation",
      title: "¬°Hola peque√±o genio!",
      description: "Audio de bienvenida que activa la motivaci√≥n intr√≠nseca y la dopamina",
      category: "motivacion",
      duration: "30s",
      script: "¬°Hola peque√±o genio! Soy tu compa√±era de aprendizaje, y estoy muy emocionada de verte aqu√≠. Tu cerebro es como un s√∫per m√∫sculo que se hace m√°s fuerte cada vez que aprendes algo nuevo. ¬øEst√°s listo para una aventura matem√°tica incre√≠ble? ¬°Vamos a descubrir juntos lo genial que eres!",
      neuroscience_principle: "Activaci√≥n del sistema de recompensa cerebral",
      color: "from-yellow-400 to-orange-500",
      icon: "üåü"
    },
    {
      id: "focus-breathing",
      title: "Respiraci√≥n para el s√∫per cerebro",
      description: "T√©cnica de respiraci√≥n que mejora la atenci√≥n sostenida y reduce cortisol",
      category: "concentracion",
      duration: "45s",
      script: "Es momento de preparar tu mente para aprender. Vamos a respirar juntos como los s√∫per h√©roes. Inhala profundo por la nariz... uno, dos, tres... Ahora exhala lentamente por la boca... uno, dos, tres, cuatro... ¬°Perfecto! Tu cerebro ya est√° listo para concentrarse. Siente c√≥mo tu mente se vuelve clara y brillante.",
      neuroscience_principle: "Activaci√≥n del sistema nervioso parasimp√°tico",
      color: "from-blue-400 to-indigo-500",
      icon: "üßò‚Äç‚ôÄÔ∏è"
    },
    {
      id: "success-celebration",
      title: "¬°Eres un campe√≥n!",
      description: "Celebraci√≥n que refuerza el aprendizaje mediante dopamina y serotonina",
      category: "celebracion",
      duration: "20s",
      script: "¬°Incre√≠ble! ¬°Lo lograste! Tu cerebro acaba de crear nuevas conexiones s√∫per poderosas. Cada vez que resuelves un problema, te vuelves m√°s inteligente. ¬°Eres un verdadero campe√≥n de las matem√°ticas! Guarda este momento feliz en tu coraz√≥n.",
      neuroscience_principle: "Consolidaci√≥n de memoria a largo plazo",
      color: "from-green-400 to-emerald-500",
      icon: "üèÜ"
    },
    {
      id: "calm-transition",
      title: "Jard√≠n de conocimiento",
      description: "Audio de transici√≥n que facilita la consolidaci√≥n de memoria",
      category: "relajacion",
      duration: "60s",
      script: "Muy bien, peque√±o explorador. Es momento de relajar tu mente despu√©s de tanto aprender. Imagina que tu cerebro es como un jard√≠n hermoso donde acabas de plantar semillas de conocimiento. Ahora estas semillas van a crecer tranquilamente mientras descansas. Respira suavemente y siente la paz en tu mente. ¬°Excelente trabajo hoy!",
      neuroscience_principle: "Facilita la neuroplasticidad durante el descanso",
      color: "from-purple-400 to-pink-500",
      icon: "üå∏"
    },
    {
      id: "problem-solving-boost",
      title: "Detective matem√°tico",
      description: "Prepara la mente para resolver problemas complejos",
      category: "resolucion",
      duration: "35s",
      script: "¬°Qu√© emocionante! Tienes un reto por delante. Recuerda que tu cerebro es como un detective s√∫per inteligente. Primero observa, luego piensa, y despu√©s encuentra la respuesta. No hay prisa, los mejores detectives toman su tiempo. ¬°Conf√≠o en ti, peque√±o genio!",
      neuroscience_principle: "Activaci√≥n de la corteza prefrontal",
      color: "from-cyan-400 to-blue-500",
      icon: "üîç"
    },
    {
      id: "error-recovery",
      title: "Los errores son maestros",
      description: "Ayuda a procesar errores de manera positiva y constructiva",
      category: "recuperacion",
      duration: "40s",
      script: "¬°Oye, est√° bien! Los errores son los mejores maestros. Cada error hace que tu cerebro se vuelva m√°s fuerte y sabio. Los cient√≠ficos m√°s famosos del mundo cometieron miles de errores antes de sus grandes descubrimientos. Respira profundo y vuelve a intentarlo. ¬°Yo creo en ti!",
      neuroscience_principle: "Reduce activaci√≥n de am√≠gdala, promueve resiliencia",
      color: "from-rose-400 to-red-500",
      icon: "üí™"
    },
    {
      id: "pre-game-energy",
      title: "¬°Hora de jugar!",
      description: "Energiza y motiva antes de comenzar actividades",
      category: "energia",
      duration: "25s",
      script: "¬°Es hora de jugar y aprender! Tu cerebro est√° s√∫per emocionado por este nuevo desaf√≠o. Recuerda: no importa si te equivocas, lo importante es intentarlo. ¬°Vamos a divertirnos mientras aprendemos! ¬°T√∫ puedes con todo!",
      neuroscience_principle: "Activa motivaci√≥n intr√≠nseca y reduce ansiedad",
      color: "from-amber-400 to-yellow-500",
      icon: "‚ö°"
    },
    {
      id: "concentration-boost",
      title: "S√∫per concentraci√≥n",
      description: "Mejora el enfoque y la atenci√≥n selectiva",
      category: "concentracion",
      duration: "40s",
      script: "Vamos a activar tu s√∫per concentraci√≥n. Cierra los ojos por un momento y siente c√≥mo tu mente se enfoca. Imagina que tienes un l√°ser de atenci√≥n en tu cerebro. Ahora abre los ojos y dirige ese l√°ser hacia el problema. ¬°Tu concentraci√≥n es incre√≠ble!",
      neuroscience_principle: "Mejora atenci√≥n selectiva, activa corteza prefrontal",
      color: "from-indigo-400 to-purple-500",
      icon: "üéØ"
    },
    {
      id: "math-confidence",
      title: "Matem√°ticas divertidas",
      description: "Reduce la ansiedad matem√°tica y aumenta la confianza",
      category: "confianza",
      duration: "35s",
      script: "Las matem√°ticas son como un juego s√∫per divertido. Cada n√∫mero es tu amigo, cada operaci√≥n es una aventura. No hay matem√°ticas dif√≠ciles, solo matem√°ticas que a√∫n no conoces bien. Y t√∫ eres muy bueno aprendiendo cosas nuevas. ¬°Eres un matem√°tico incre√≠ble!",
      neuroscience_principle: "Reduce ansiedad matem√°tica, mejora autoeficacia",
      color: "from-teal-400 to-cyan-500",
      icon: "üßÆ"
    },
    {
      id: "end-session-positive",
      title: "¬°Sesi√≥n fant√°stica!",
      description: "Cierre positivo que consolida el aprendizaje",
      category: "celebracion",
      duration: "30s",
      script: "¬°Qu√© sesi√≥n tan fant√°stica hemos tenido! Tu cerebro ha trabajado muy duro y ha aprendido cosas incre√≠bles. Cada minuto que practicas, te vuelves m√°s inteligente. Descansa bien, que ma√±ana tendremos m√°s aventuras matem√°ticas. ¬°Estoy muy orgullosa de ti!",
      neuroscience_principle: "Consolida aprendizaje, refuerza motivaci√≥n futura",
      color: "from-emerald-400 to-green-500",
      icon: "üéâ"
    }
  ];

  // Verificar disponibilidad de Speech Synthesis
  useEffect(() => {
    setIsAvailable('speechSynthesis' in window);
  }, []);

  // Configurar voz en espa√±ol para ni√±os
  const getSpanishVoice = useCallback(() => {
    const voices = speechSynthesis.getVoices();
    // Buscar voces en espa√±ol, preferir femeninas y claras
    const spanishVoices = voices.filter(voice => 
      voice.lang.startsWith('es') || voice.name.toLowerCase().includes('spanish')
    );
    
    // Preferir voces femeninas para ni√±os
    const femaleVoice = spanishVoices.find(voice => 
      voice.name.toLowerCase().includes('female') || 
      voice.name.toLowerCase().includes('mujer') ||
      voice.name.toLowerCase().includes('maria') ||
      voice.name.toLowerCase().includes('carmen')
    );
    
    return femaleVoice || spanishVoices[0] || voices[0];
  }, []);

  const playAudio = useCallback((audioId: string) => {
    if (!isAvailable) {
      console.log('Speech Synthesis no disponible');
      return;
    }

    const audio = cognitiveAudios.find(a => a.id === audioId);
    if (!audio) return;

    // Detener audio actual si existe
    if (speechRef.current) {
      speechSynthesis.cancel();
      speechRef.current = null;
      setCurrentAudio(null);
      setIsPlaying(false);
    }

    // Crear nueva instancia de speech
    speechRef.current = new SpeechSynthesisUtterance(audio.script);
    
    // Configurar voz
    const voice = getSpanishVoice();
    if (voice) {
      speechRef.current.voice = voice;
    }
    
    // Configurar par√°metros para ni√±os
    speechRef.current.rate = 0.8; // Velocidad m√°s lenta
    speechRef.current.pitch = 1.2; // Tono ligeramente m√°s alto
    speechRef.current.volume = 0.8; // Volumen controlado

    // Eventos
    speechRef.current.onstart = () => {
      setCurrentAudio(audioId);
      setIsPlaying(true);
    };

    speechRef.current.onend = () => {
      setCurrentAudio(null);
      setIsPlaying(false);
      speechRef.current = null;
    };

    speechRef.current.onerror = () => {
      console.log(`Error reproduciendo audio: ${audio.title}`);
      setCurrentAudio(null);
      setIsPlaying(false);
      speechRef.current = null;
    };

    // Reproducir
    speechSynthesis.speak(speechRef.current);
  }, [cognitiveAudios, getSpanishVoice, isAvailable]);

  const stopAudio = useCallback(() => {
    if (speechRef.current) {
      speechSynthesis.cancel();
      speechRef.current = null;
      setCurrentAudio(null);
      setIsPlaying(false);
    }
  }, []);

  // Funciones espec√≠ficas para cada tipo de audio (SOLO MANUAL)
  const playWelcomeAudio = useCallback(() => {
    // Esta funci√≥n ahora est√° disponible pero NO se ejecuta autom√°ticamente
    const welcomeAudio = cognitiveAudios.find(audio => audio.id === "welcome-motivation");
    if (welcomeAudio) {
      playAudio(welcomeAudio.id);
    }
  }, [cognitiveAudios, playAudio]);

  const playSuccessAudio = useCallback(() => {
    const successAudio = cognitiveAudios.find(audio => audio.id === "success-celebration");
    if (successAudio) {
      playAudio(successAudio.id);
    }
  }, [cognitiveAudios, playAudio]);

  const playErrorRecoveryAudio = useCallback(() => {
    const errorAudio = cognitiveAudios.find(audio => audio.id === "error-recovery");
    if (errorAudio) {
      playAudio(errorAudio.id);
    }
  }, [cognitiveAudios, playAudio]);

  const playFocusAudio = useCallback(() => {
    const focusAudio = cognitiveAudios.find(audio => audio.id === "focus-breathing");
    if (focusAudio) {
      playAudio(focusAudio.id);
    }
  }, [cognitiveAudios, playAudio]);

  const playPreGameAudio = useCallback(() => {
    const preGameAudio = cognitiveAudios.find(audio => audio.id === "pre-game-energy");
    if (preGameAudio) {
      playAudio(preGameAudio.id);
    }
  }, [cognitiveAudios, playAudio]);

  const playEndSessionAudio = useCallback(() => {
    const endAudio = cognitiveAudios.find(audio => audio.id === "end-session-positive");
    if (endAudio) {
      playAudio(endAudio.id);
    }
  }, [cognitiveAudios, playAudio]);

  const playMathConfidenceAudio = useCallback(() => {
    const mathAudio = cognitiveAudios.find(audio => audio.id === "math-confidence");
    if (mathAudio) {
      playAudio(mathAudio.id);
    }
  }, [cognitiveAudios, playAudio]);

  const playConcentrationAudio = useCallback(() => {
    const concentrationAudio = cognitiveAudios.find(audio => audio.id === "concentration-boost");
    if (concentrationAudio) {
      playAudio(concentrationAudio.id);
    }
  }, [cognitiveAudios, playAudio]);

  const playProblemSolvingAudio = useCallback(() => {
    const problemAudio = cognitiveAudios.find(audio => audio.id === "problem-solving-boost");
    if (problemAudio) {
      playAudio(problemAudio.id);
    }
  }, [cognitiveAudios, playAudio]);

  const playCalmTransitionAudio = useCallback(() => {
    const calmAudio = cognitiveAudios.find(audio => audio.id === "calm-transition");
    if (calmAudio) {
      playAudio(calmAudio.id);
    }
  }, [cognitiveAudios, playAudio]);

  // Limpiar al desmontar
  useEffect(() => {
    return () => {
      if (speechRef.current) {
        speechSynthesis.cancel();
        speechRef.current = null;
      }
    };
  }, []);

  return {
    currentAudio,
    isPlaying,
    isAvailable,
    showCognitiveModal,
    setShowCognitiveModal,
    cognitiveAudios,
    playAudio,
    stopAudio,
    playWelcomeAudio,
    playSuccessAudio,
    playErrorRecoveryAudio,
    playFocusAudio,
    playPreGameAudio,
    playEndSessionAudio,
    playMathConfidenceAudio,
    playConcentrationAudio,
    playProblemSolvingAudio,
    playCalmTransitionAudio
  };
};